import org.junit.Test;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.InputStream;

import static org.junit.Assert.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class LempelZivTest {
	/*
	LempelZiv first = new LempelZiv("abcbababcbcabac");
	LempelZiv second = new LempelZiv("Isto é um teste, muito legal este teste!");
	LempelZiv third = new LempelZiv("ababa");
	LempelZiv fourth = new LempelZiv("abababa");
	LempelZiv fifth = new LempelZiv("ababababa");
	LempelZiv sixth = new LempelZiv("abababababa");
	LempelZiv seventh = new LempelZiv("ababababababa");
	LempelZiv eighth = new LempelZiv("ababababababab");
	LempelZiv ninth = new LempelZiv("Qualquer whatever da COMP ITA!");
	LempelZiv tenth = new LempelZiv("Estamos usando o TDD para descobrir se este programa funciona.");
	*/
	
	
	public int N_Bits (String Codigo)
	{
		int result = 0;
		int i;
		for (i = 0; i< Codigo.length(); i++)
			if (Codigo.charAt(i) == '0' || Codigo.charAt(i) ==  '1')
				result ++;
			else result = result + 8;
		return result;
	}
	
	public int N_Bytes (String Codigo)
	{
		int result = 0;
		int i;
		for (i = 0; i< Codigo.length(); i++)
			if (Codigo.charAt(i) == '0' || Codigo.charAt(i) ==  '1')
				result ++;
			else result = result + 8;
		return result/8;
	}
	
	
	
	
	String LerArquivo (String arquivo)
	{
		String result = "";
		InputStream inputstream;
        try {
               inputstream = new BufferedInputStream(new FileInputStream(arquivo));
               int data = inputstream.read();
               while (data != -1) {
            	   	  if (data != 15)
                      result = result + (char) data;
                      data = inputstream.read();
               }
               inputstream.close();
        } catch (FileNotFoundException e1)
        {     
               e1.printStackTrace();
        } catch (IOException e)
        {
               e.printStackTrace();
        }
        return result;
	}
	
	
	



	@Test
	public void EncryptTrial()
	{
		
		String Texto = LerArquivo("input.txt");
		
		long startTimeCompression = System.nanoTime();
		
		LempelZiv eleventh = new LempelZiv(Texto);
		
		//System.out.println("Codificado = " + eleventh.toEncodedString());
		
		long endTimeCompression = System.nanoTime();
		
		long startTimeDecompression = System.nanoTime();
		
		eleventh.decode();
		
		long endTimeDecompression = System.nanoTime();
		
		System.out.println("Texto decodificado: \n" + eleventh.toDecodedString());
		System.out.println("Tamanho do codificado em Bits:" + N_Bits( eleventh.toEncodedString()));
		System.out.println("Tamanho do codificado em Bytes:" + N_Bytes( eleventh.toEncodedString()));

		
		
		
		System.out.println("Compressing Time: " + (endTimeCompression - startTimeCompression)/1000000000.0 + " s");
		System.out.println("Decompressing Time: " + (endTimeDecompression - startTimeDecompression)/1000000000.0 + " s");
		
		assertEquals(Texto, eleventh.toDecodedString());
		
	}
	
	/*
	@Test
	public void DecryptTrial()
	{
	    first.decode();
		assertEquals("abcbababcbcabac",first.toDecodedString());
	}
	@Test
	public void DecryptTrial2() {
	    second.decode();
	    System.out.println(second.toEncodedString());
		assertEquals("Isto é um teste, muito legal este teste!",second.toDecodedString());
	}	
	@Test
	public void DecryptTrial3() {
	    third.decode();
		assertEquals("ababa",third.toDecodedString());
	}
	@Test
	public void DecryptTrial4() {
	    fourth.decode();
		assertEquals("abababa",fourth.toDecodedString());
	}
	@Test
	public void DecryptTrial5() {
	    fifth.decode();
		assertEquals("ababababa",fifth.toDecodedString());
	}
	@Test
	public void DecryptTrial6() {
	    sixth.decode();
		assertEquals("abababababa",sixth.toDecodedString());
	}
	@Test
	public void DecryptTrial7() {
	    seventh.decode();
		assertEquals("ababababababa",seventh.toDecodedString());
	}
	
	@Test
	public void DecryptTrial8() {
	    eighth.decode();
		assertEquals("ababababababab",eighth.toDecodedString());
	}
	
	@Test
	public void DecryptTrial9() {
	    ninth.decode();
		assertEquals("Qualquer whatever da COMP ITA!",ninth.toDecodedString());
	}
	
	@Test
	public void DecryptTrial10() {
	    tenth.decode();
		assertEquals("Estamos usando o TDD para descobrir se este programa funciona.",tenth.toDecodedString());
	}
	
	@Test
	public void DecryptTrial11() {
	    eleventh.decode();
		assertEquals("Estamos usando o TDD para descobrir se este programa fdosamdosamcinsidnsidni!@!@()!(Smksmakmckmkkjsodksodksoslpalspals09mcmck     lspalspalspalspalspa/*asasalplpa01t",eleventh.toDecodedString());
	}
	
	
	*/
	
	
	

}
